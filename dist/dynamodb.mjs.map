{"version":3,"file":"dynamodb.mjs","sources":["../src/dynamodb.ts"],"sourcesContent":["import { DynamoDB } from \"aws-sdk\";\n\nconst dynamoDB = new DynamoDB.DocumentClient();\n\ninterface UpdateItemParams {\n    TableName: string;\n    Key: {\n        [key: string]: string;\n    };\n    UpdateExpression: string;\n    ExpressionAttributeValues: {\n        [key: string]: string | number | undefined | null;\n    };\n    ReturnValues?: string;\n}\n\ninterface GetItemParams {\n    TableName: string;\n    Key: {\n        [key: string]: string;\n    };\n}\n\ninterface DeleteItemParams {\n    TableName: string;\n    Key: {\n        [key: string]: string;\n    };\n    ReturnValues?: string;\n}\n\ninterface ScanItemsParams {\n    TableName: string;\n    FilterExpression?: string;\n    ExpressionAttributeNames?: {\n        [key: string]: string;\n    };\n    ExpressionAttributeValues?: {\n        [key: string]: string | number | undefined | null;\n    };\n    Limit?: number;\n}\n\n// Used for upserting items\nexport const updateItem = async (\n    params: UpdateItemParams\n): Promise<AWS.DynamoDB.DocumentClient.UpdateItemOutput> => {\n    const query = {\n        ReturnValues: \"ALL_NEW\",\n        ...params,\n    };\n\n    return new Promise((resolve, reject) => {\n        dynamoDB.update(query, (err, result) => {\n            if (err) {\n                console.error(err);\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n};\n\n// collect all fields in a JSON object into a DynamoDB expression\nexport const buildExpression = (body: any) => {\n    return Object.keys(body)\n        .map((key: string) => `${key} = :${key}`)\n        .join(\", \");\n};\n\n// collect all fields in a JSON objct into DynamoDB attributes\nexport const buildAttributes = (body: any) => {\n    return Object.fromEntries(\n        Object.entries(body).map(([key, value]) => [\n            `:${key}`,\n            typeof value === \"string\" || typeof value === \"number\"\n                ? value\n                : JSON.stringify(value),\n        ])\n    );\n};\n\n// Used for getting items based on a key\nexport const getItem = async (\n    params: GetItemParams\n): Promise<AWS.DynamoDB.DocumentClient.GetItemOutput> => {\n    const query = {\n        ...params,\n    };\n\n    return new Promise((resolve, reject) => {\n        dynamoDB.get(query, (err, result) => {\n            if (err) {\n                console.error(err);\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n};\n\n// Used for searching tables\nexport const scanItems = async (\n    params: ScanItemsParams\n): Promise<AWS.DynamoDB.DocumentClient.ScanOutput> => {\n    const query = {\n        ...params,\n    };\n\n    return new Promise((resolve, reject) => {\n        dynamoDB.scan(query, (err, result) => {\n            if (err) {\n                console.error(err);\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n};\n\n// Used for deleting items\nexport const deleteItem = async (\n    params: DeleteItemParams\n): Promise<AWS.DynamoDB.DocumentClient.DeleteItemOutput> => {\n    const query = {\n        ReturnValues: \"ALL_OLD\",\n        ...params,\n    };\n\n    return new Promise((resolve, reject) => {\n        dynamoDB.delete(query, (err, result) => {\n            if (err) {\n                console.error(err);\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n    });\n};\n"],"names":["const","dynamoDB","DynamoDB","DocumentClient","updateItem","params","query","Object","ReturnValues","Promise","resolve","reject","update","err","result","console","error","buildExpression","body","keys","map","key","join","buildAttributes","fromEntries","entries","value","JSON","stringify","getItem","get","scanItems","scan","deleteItem","delete"],"mappings":"mCAEAA,IAAMC,EAAW,IAAIC,EAASC,eA0CjBC,WACTC,WAEMC,EAAQC,kBACVC,aAAc,WACXH,0BAGA,IAAII,iBAASC,EAASC,GACzBV,EAASW,OAAON,WAAQO,EAAKC,GACrBD,GACAE,QAAQC,MAAMH,GACdF,EAAOE,IAEPH,EAAQI,4CAOXG,WAAmBC,UACrBX,OAAOY,KAAKD,GACdE,aAAKC,UAAmBA,SAAUA,IAClCC,KAAK,OAIDC,WAAmBL,UACrBX,OAAOiB,YACVjB,OAAOkB,QAAQP,GAAME,iCAAsB,UAEtB,iBAAVM,GAAuC,iBAAVA,EAC9BA,EACAC,KAAKC,UAAUF,QAMpBG,WACTxB,WAEMC,EAAQC,iBACPF,0BAGA,IAAII,iBAASC,EAASC,GACzBV,EAAS6B,IAAIxB,WAAQO,EAAKC,GAClBD,GACAE,QAAQC,MAAMH,GACdF,EAAOE,IAEPH,EAAQI,4CAOXiB,WACT1B,WAEMC,EAAQC,iBACPF,0BAGA,IAAII,iBAASC,EAASC,GACzBV,EAAS+B,KAAK1B,WAAQO,EAAKC,GACnBD,GACAE,QAAQC,MAAMH,GACdF,EAAOE,IAEPH,EAAQI,4CAOXmB,WACT5B,WAEMC,EAAQC,kBACVC,aAAc,WACXH,0BAGA,IAAII,iBAASC,EAASC,GACzBV,EAASiC,OAAO5B,WAAQO,EAAKC,GACrBD,GACAE,QAAQC,MAAMH,GACdF,EAAOE,IAEPH,EAAQI"}